plugins {
    id 'com.android.application'
}

android {
    namespace 'io.promptworld.app' // Ensure this matches your package name
    compileSdk 33 // Example: Android 13 (Tiramisu)

    defaultConfig {
        applicationId "io.promptworld.app"
        minSdk 26 // Android 8.0 (Oreo) - as per README
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            // IMPORTANT: Configure your release signing information securely.
            // 1. Generate a keystore file if you don't have one:
            //    keytool -genkey -v -keystore promptworld-release-key.keystore -alias promptworldalias -keyalg RSA -keysize 2048 -validity 10000
            //    Place 'promptworld-release-key.keystore' in the 'android/app/' directory.
            //    Ensure this file is NOT added to version control (e.g., add it to .gitignore).
            //
            // 2. Store your keystore path, passwords, and alias securely.
            //    The recommended way is to use a 'gradle.properties' file in your user's .gradle directory
            //    (e.g., ~/.gradle/gradle.properties) or environment variables.
            //    Do NOT hardcode them here.
            //
            // Example using gradle.properties (add these lines to your ~/.gradle/gradle.properties):
            // PROMPTWORLD_RELEASE_STORE_FILE=path/to/your/promptworld-release-key.keystore
            // PROMPTWORLD_RELEASE_STORE_PASSWORD=your_store_password
            // PROMPTWORLD_RELEASE_KEY_ALIAS=promptworldalias
            // PROMPTWORLD_RELEASE_KEY_PASSWORD=your_key_password
            //
            // Then, uncomment and use these lines below:
            // if (project.hasProperty('PROMPTWORLD_RELEASE_STORE_FILE')) {
            //     storeFile file(PROMPTWORLD_RELEASE_STORE_FILE)
            //     storePassword PROMPTWORLD_RELEASE_STORE_PASSWORD
            //     keyAlias PROMPTWORLD_RELEASE_KEY_ALIAS
            //     keyPassword PROMPTWORLD_RELEASE_KEY_PASSWORD
            // } else {
            //     // Fallback or error if properties not found, e.g., for CI builds without credentials
            //     println "Release signing information not found. Build will use debug signing or fail."
            //     // Alternatively, to make it fail explicitly if not set:
            //     // throw new InvalidUserDataException("Release signing information not found in gradle.properties or environment variables.")
            // }

            // The following are placeholder lines to allow the project to sync/build initially.
            // YOU MUST REPLACE OR CONFIGURE THEM SECURELY AS DESCRIBED ABOVE.
            storeFile file(System.getenv("PROMPTWORLD_RELEASE_STORE_FILE") ?: project.findProperty("PROMPTWORLD_RELEASE_STORE_FILE") ?: "promptworld-release-key.keystore")
            storePassword System.getenv("PROMPTWORLD_RELEASE_STORE_PASSWORD") ?: project.findProperty("PROMPTWORLD_RELEASE_STORE_PASSWORD") ?: ""
            keyAlias System.getenv("PROMPTWORLD_RELEASE_KEY_ALIAS") ?: project.findProperty("PROMPTWORLD_RELEASE_KEY_ALIAS") ?: "promptworldalias"
            keyPassword System.getenv("PROMPTWORLD_RELEASE_KEY_PASSWORD") ?: project.findProperty("PROMPTWORLD_RELEASE_KEY_PASSWORD") ?: ""
        }
    }

    buildTypes {
        release {
            minifyEnabled false // Consider enabling for actual release
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    // If you have Kotlin, configure it here
    // kotlinOptions {
    //     jvmTarget = '1.8'
    // }

    // Ensure assets from src/main/assets are packaged
    sourceSets {
        main {
            assets.srcDirs = ['src/main/assets']
            // If your web assets are in ../../src (relative to this build.gradle)
            // and you want to copy them automatically, you might add a task.
            // For now, manual copy or symlink is assumed for src/ -> android/app/src/main/assets/
        }
    }
    // Note: For a real build, you'd need to ensure web assets from the main `src`
    // directory (e.g., `../../src/index.html`) are copied into `android/app/src/main/assets/`.
    // This can be done with a custom Gradle task or by manually placing them.
    // The `MainActivity.java` currently loads `file:///android_asset/index.html`.
}

dependencies {
    // Standard Android dependencies
    implementation 'androidx.appcompat:appcompat:1.6.1' // Example, use latest stable
    implementation 'com.google.android.material:material:1.9.0' // Example for Material Design components

    // Testing dependencies
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    // WebView (already part of Android SDK but good to be explicit if needed for specific features)
    // implementation 'androidx.webkit:webkit:1.7.0' // If you need newer WebView features not in OS
}

// Custom task to copy web assets from the root src/ folder to the Android assets folder
task copyWebAssets(type: Copy) {
    from '../../src' // Relative path from android/app/ to the root src/ folder
    into 'src/main/assets'
    include '*.html', '*.css', '*.js', '*.json', 'sw.js' // Added sw.js
    include 'assets/**' // This will copy the src/assets/ directory into android/app/src/main/assets/assets/
    // To avoid nesting 'assets' inside 'assets', we can copy contents directly
    // However, for simplicity and to match the manifest icon paths like 'assets/icons/icon.png',
    // keeping the 'assets' folder structure is fine if MainActivity loads 'index.html' correctly
    // and index.html references 'assets/icons/...'
}

// Ensure this task runs before assets are processed by the Android build
tasks.whenTaskAdded { task ->
    if (task.name == 'preBuild') {
        task.dependsOn 'copyWebAssets'
    }
}
