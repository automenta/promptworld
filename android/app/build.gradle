plugins {
    id 'com.android.application'
}

android {
    namespace 'com.example.promptworld' // Ensure this matches your package name
    compileSdk 33 // Example: Android 13 (Tiramisu)

    defaultConfig {
        applicationId "com.example.promptworld"
        minSdk 26 // Android 8.0 (Oreo) - as per README
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            // IMPORTANT: Replace these with your actual keystore details.
            // You should not commit your keystore or its passwords to version control.
            // Store them securely, e.g., in environment variables or a gradle.properties file
            // that is not checked into source control.
            // Example:
            // storeFile file(System.getenv("KEYSTORE_FILE") ?: "my-release-key.keystore")
            // storePassword System.getenv("KEYSTORE_PASSWORD") ?: "YOUR_STORE_PASSWORD"
            // keyAlias System.getenv("KEY_ALIAS") ?: "YOUR_KEY_ALIAS"
            // keyPassword System.getenv("KEY_PASSWORD") ?: "YOUR_KEY_PASSWORD"
            //
            // For this placeholder, we'll assume the keystore would be in the app module's root.
            // In a real setup, you would generate this file using keytool.
            storeFile file("promptworld-release-key.keystore")
            storePassword "YOUR_STORE_PASSWORD_PLACEHOLDER"
            keyAlias "promptworldalias"
            keyPassword "YOUR_KEY_PASSWORD_PLACEHOLDER"
        }
    }

    buildTypes {
        release {
            minifyEnabled false // Consider enabling for actual release
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    // If you have Kotlin, configure it here
    // kotlinOptions {
    //     jvmTarget = '1.8'
    // }

    // Ensure assets from src/main/assets are packaged
    sourceSets {
        main {
            assets.srcDirs = ['src/main/assets']
            // If your web assets are in ../../src (relative to this build.gradle)
            // and you want to copy them automatically, you might add a task.
            // For now, manual copy or symlink is assumed for src/ -> android/app/src/main/assets/
        }
    }
    // Note: For a real build, you'd need to ensure web assets from the main `src`
    // directory (e.g., `../../src/index.html`) are copied into `android/app/src/main/assets/`.
    // This can be done with a custom Gradle task or by manually placing them.
    // The `MainActivity.java` currently loads `file:///android_asset/index.html`.
}

dependencies {
    // Standard Android dependencies
    implementation 'androidx.appcompat:appcompat:1.6.1' // Example, use latest stable
    implementation 'com.google.android.material:material:1.9.0' // Example for Material Design components

    // Testing dependencies
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    // WebView (already part of Android SDK but good to be explicit if needed for specific features)
    // implementation 'androidx.webkit:webkit:1.7.0' // If you need newer WebView features not in OS
}

// Custom task to copy web assets from the root src/ folder to the Android assets folder
task copyWebAssets(type: Copy) {
    from '../../src' // Relative path from android/app/ to the root src/ folder
    into 'src/main/assets'
    include '*.html', '*.css', '*.js', '*.json', 'sw.js' // Added sw.js
    include 'assets/**' // This will copy the src/assets/ directory into android/app/src/main/assets/assets/
    // To avoid nesting 'assets' inside 'assets', we can copy contents directly
    // However, for simplicity and to match the manifest icon paths like 'assets/icons/icon.png',
    // keeping the 'assets' folder structure is fine if MainActivity loads 'index.html' correctly
    // and index.html references 'assets/icons/...'
}

// Ensure this task runs before assets are processed by the Android build
tasks.whenTaskAdded { task ->
    if (task.name == 'preBuild') {
        task.dependsOn 'copyWebAssets'
    }
}
